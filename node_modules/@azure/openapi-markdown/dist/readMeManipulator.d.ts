import * as commonmark from "commonmark";
import { ReadMeBuilder } from "./readMeBuilder";
import { Logger } from "./logger";
import { MarkDownEx } from "@ts-common/commonmark-to-markdown";
import * as it from "@ts-common/iterator";
/**
 * Examples:
 * - https://github.com/Azure/azure-rest-api-specs/blob/4c2be7a9983963a75e15c579e4fc8d17e547ea69/specification/guestconfiguration/resource-manager/readme.md#suppression
 * - https://github.com/Azure/azure-rest-api-specs/blob/32b0d873aa851d456dfde7d6ba1d89ff33f897f0/specification/azsadmin/resource-manager/user-subscriptions/readme.md#suppression
 */
export interface SuppressionItem {
    readonly suppress: string;
    readonly reason?: string;
    readonly where: string | readonly string[];
    readonly from?: string | readonly string[];
    readonly "text-matches"?: string;
}
export interface Suppression {
    readonly directive: readonly SuppressionItem[];
}
export interface TagSettings {
    readonly "input-file": readonly string[] | string;
}
export declare const inputFile: (tagSettings: TagSettings) => readonly string[];
/**
 * Provides operations that can be applied to readme files
 */
export declare class ReadMeManipulator {
    private logger;
    private readMeBuilder;
    constructor(logger: Logger, readMeBuilder: ReadMeBuilder);
    /**
     * Updates the latest version tag of a readme
     */
    readonly updateLatestTag: (markDownEx: MarkDownEx, newTag: string) => string;
    readonly insertTagDefinition: (readmeContent: string, tagFiles: readonly string[], newTag: string) => string;
    readonly addSuppressionBlock: (readme: string) => string;
    /**
     * This function takes a markdown document and a list of file paths and
     * returns the list of tags that reference these file paths. It is meant to
     * work like https://github.com/Azure/azure-rest-api-specs/blob/master/test/linter.js
     */
    readonly getTagsForFilesChanged: (markDownEx: MarkDownEx, specsChanged: readonly string[]) => readonly string[];
    readonly getAllTags: (markDownEx: MarkDownEx) => readonly string[];
}
export declare const getTagsToSettingsMapping: (startNode: commonmark.Node) => {
    readonly [keg: string]: TagSettings | undefined;
};
export declare const getInputFiles: (startNode: commonmark.Node) => it.IterableEx<string>;
/**
 * Get input files listed for a given tag
 * @returns array of file path or null if the tag doesn't exists
 */
export declare const getInputFilesForTag: (startNode: commonmark.Node, tag: string) => readonly string[] | undefined;
export declare const addSuppression: (startNode: commonmark.Node, item: SuppressionItem) => void;
export declare const base64ToMarkDownEx: (base: string) => MarkDownEx;
export declare const getYamlFromNode: (node: commonmark.Node) => any;
export declare const hasSuppressionBlock: (startNode: commonmark.Node) => boolean;
export interface CodeBlocksAndHeadings {
    readonly Suppression?: commonmark.Node;
    readonly [key: string]: commonmark.Node | undefined;
}
export declare const getCodeBlocksAndHeadings: (startNode: commonmark.Node) => CodeBlocksAndHeadings;
//# sourceMappingURL=readMeManipulator.d.ts.map