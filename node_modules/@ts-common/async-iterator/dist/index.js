"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.iterable = (createIterator) => {
    const property = (f) => (...p) => f(result, ...p);
    const result = {
        [Symbol.asyncIterator]: createIterator,
        fold: property(exports.fold),
        toArray: property(exports.toArray),
        entries: property(exports.entries),
        map: property(exports.map),
        flatMap: property(exports.flatMap),
        filter: property(exports.filter),
    };
    return result;
};
exports.fromSync = (input) => exports.iterable(async function* () { yield* input; });
exports.fromSequence = (...a) => exports.fromSync(a);
exports.fromPromise = (p) => exports.iterable(async function* () { yield* await p; });
exports.fold = async (input, func, init) => {
    // tslint:disable-next-line:no-let
    let result = init;
    /* tslint:disable-next-line:no-loop-statement */
    for await (const [index, value] of exports.entries(input)) {
        /* tslint:disable-next-line:no-expression-statement */
        result = await func(result, value, index);
    }
    return result;
};
exports.toArray = (input) => exports.fold(input, (a, i) => [...a, i], new Array());
exports.entries = (input) => exports.iterable(async function* () {
    // tslint:disable-next-line:no-if-statement
    if (input === undefined) {
        return;
    }
    // tslint:disable-next-line:no-let
    let index = 0;
    // tslint:disable-next-line:no-loop-statement
    for await (const value of input) {
        yield [index, value];
        // tslint:disable-next-line:no-expression-statement
        index += 1;
    }
});
exports.map = (input, func) => exports.iterable(async function* () {
    /* tslint:disable-next-line:no-loop-statement */
    for await (const [index, value] of exports.entries(input)) {
        yield func(value, index);
    }
});
exports.flatten = (input) => exports.iterable(async function* () {
    // tslint:disable-next-line:no-if-statement
    if (input === undefined) {
        return;
    }
    // tslint:disable-next-line:no-loop-statement
    for await (const v of input) {
        // tslint:disable-next-line:no-if-statement
        if (v !== undefined) {
            yield* v;
        }
    }
});
exports.flatMap = (input, func) => exports.flatten(exports.map(input, func));
// tslint:disable-next-line:no-empty
exports.empty = () => exports.iterable(async function* () { });
exports.filter = (input, func) => exports.flatMap(input, (v, i) => exports.iterable(async function* () {
    // tslint:disable-next-line:no-if-statement
    if (await func(v, i)) {
        yield v;
    }
}));
//# sourceMappingURL=index.js.map