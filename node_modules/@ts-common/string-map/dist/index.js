"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const _ = tslib_1.__importStar(require("@ts-common/iterator"));
// export const entry: <T>(key: string, value: T) => Entry<T> = tuple2
exports.entryKey = (e) => e[0 /* Key */];
exports.entryValue = (e) => e[1 /* Value */];
exports.toStringMap = (v) => v;
exports.allKeys = (input) => exports.objectAllKeys(input);
exports.objectAllKeys = (input) => _.iterable(function* () {
    // tslint:disable-next-line:no-if-statement
    if (input === undefined || input === null) {
        return;
    }
    // tslint:disable-next-line:no-loop-statement
    for (const key in input) {
        yield key;
    }
});
exports.entries = (input) => exports.objectEntries(input);
exports.objectEntries = (input) => {
    // tslint:disable-next-line:no-if-statement
    if (input === undefined || input === null) {
        return _.empty();
    }
    return exports.objectAllKeys(input)
        .filterMap(key => {
        const value = input[key];
        return value !== undefined ? [key, value] : undefined;
    });
};
exports.keys = (input) => exports.entries(input).map(exports.entryKey);
exports.values = (input) => exports.entries(input).map(exports.entryValue);
exports.groupBy = (input, reduceFunc) => {
    /* tslint:disable-next-line:readonly-keyword */
    const result = {};
    _.forEach(input, ([key, value]) => {
        const prior = result[key];
        /* tslint:disable-next-line:no-object-mutation no-expression-statement */
        result[key] = prior === undefined ? value : reduceFunc(prior, value);
    });
    return result;
};
exports.stringMap = (input) => 
// tslint:disable-next-line:variable-name
exports.groupBy(input, (_a, b) => b);
exports.map = (source, f) => exports.stringMap(exports.entries(source).map(([k, v]) => [k, f(v, k)]));
exports.merge = (...a) => exports.stringMap(_.map(a, exports.entries).flatMap(v => v));
// Performs a partial deep comparison between object and source to determine if object contains
// equivalent property values.
// See also https://lodash.com/docs/4.17.10#isMatch
exports.isMatch = (object, source) => exports.entries(source).every(([key, value]) => _.isStrictEqual(object[key], value));
exports.isEqual = (a, b) => _.isStrictEqual(a, b) || (exports.isMatch(a, b) && exports.isMatch(b, a));
exports.isEmpty = (a) => exports.entries(a).isEmpty();
//# sourceMappingURL=index.js.map