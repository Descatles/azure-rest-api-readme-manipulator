"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cm = require("commonmark");
const fm = require("front-matter");
const it = require("@ts-common/iterator");
exports.createNode = (type, ...children) => {
    const result = new cm.Node(type);
    for (const c of children) {
        result.appendChild(c);
    }
    return result;
};
exports.createText = (literal) => {
    const result = exports.createNode("text");
    result.literal = literal;
    return result;
};
exports.createCodeBlock = (info, literal) => {
    const result = exports.createNode("code_block");
    result.info = info;
    result.literal = literal;
    return result;
};
exports.iterate = (node) => it.iterable(function* () {
    let c = node.firstChild;
    while (c !== null) {
        yield c;
        c = c.next;
    }
});
exports.parse = (fileContent) => {
    const result = fm(fileContent);
    const parser = new cm.Parser();
    return {
        frontMatter: result.frontmatter,
        markDown: parser.parse(result.body)
    };
};
exports.markDownExToString = (mde) => {
    const md = unescape(commonmarkToString(mde.markDown));
    return mde.frontMatter === undefined ? md : `---\n${mde.frontMatter}\n---\n${md}`;
};
const commonmarkToString = (root) => {
    let walker = root.walker();
    let event;
    let output = "";
    while ((event = walker.next())) {
        let curNode = event.node;
        const leaving = render.leaving[curNode.type];
        if (!event.entering && leaving !== undefined) {
            output += leaving(curNode, event.entering);
        }
        const entering = render.entering[curNode.type];
        if (event.entering && entering !== undefined) {
            output += entering(curNode, event.entering);
        }
    }
    output = output.replace(/\n$/, "");
    return output;
};
const indent = (node) => node !== null ? indent(node.parent) + (node.type === "item" ? "  " : "") : "";
const render = {
    entering: {
        text: (node) => node.literal,
        softbreak: () => "\n",
        linebreak: () => "\n",
        emph: () => "*",
        strong: () => "**",
        html_inline: () => "`",
        link: () => "[",
        image: () => { },
        code: (node) => `\`${node.literal}\``,
        document: () => "",
        paragraph: () => "",
        block_quote: () => "> ",
        item: (node) => `${indent(node.parent)}${{ bullet: "*", ordered: `1${node.listDelimiter}` }[node.listType]} `,
        list: () => "",
        heading: (node) => Array(node.level)
            .fill("#")
            .join("") + " ",
        code_block: (node) => `\`\`\` ${node.info}\n${node.literal}\`\`\`\n\n`,
        html_block: (node) => node.literal,
        thematic_break: () => "---\n\n",
        custom_inline: () => { },
        custom_block: () => { },
    },
    leaving: {
        heading: () => "\n\n",
        paragraph: () => "\n\n",
        link: (node) => `](${node.destination})`,
        strong: () => "**",
        emph: () => "*",
    }
};
//# sourceMappingURL=index.js.map